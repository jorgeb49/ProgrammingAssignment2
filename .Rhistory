get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(3,2,1,2))
x
jorge <- makeVector(c(3,2,1,2))
jorge
makeCacheMatrix <- function(x = matrix()) {
#m_inv is the matrix inverse, inittialized at null
m_inv <- NULL
# set is a function that initializes the matrix
set <- function(y) {
x <<- y
m_inv <<- NULL
}
#get is a function that gets the matrix itself
get <- function() x
#set_m_inv sets the inverse of the matrix
set_m_inv <- function(mat_inv) m_inv <<- mat_inv
#get_m_inv returs or gets the inverse of the matrix
get_m_inv <- function() m_inv
#this is just to list the components of the function makeCacheMatrix
list(set = set, get = get,
set_m_inv = set_m_inv,
get_m_inv = get_m_inv)
}
## Write a short comment describing this function: Read lines below please
cacheSolve <- function(x, ...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data, ...)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
jorge <- makeCahceMatrix
jorge <- makeCacheMatrix
jorge$set(matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2))
(matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2))
(matrix(c(2, 4, 3, 1, 5, 7),nrow=3,ncol=2))
jorge$set(matrix(c(2, 4, 3, 1, 5, 7),nrow=3,ncol=2))
jorge$set(matrix(c(2, 4, 3, 1, 5, 7),nrow=3,ncol=2))
[1,2,3;4,5,6;7,8,9]
matrix(1:6,2,3)
jorge$set(matrix(1:6,2,3))
ignacio <- matrix(1:6,2,3)
jorge$set(ignacio)
jorge$set(null)
makeCacheMatrix <- function(x = matrix()) {
#m_inv is the matrix inverse, inittialized at null
m_inv <- NULL
# set is a function that initializes the matrix
set <- function(y) {
x <<- y
m_inv <<- NULL
}
#get is a function that gets the matrix itself
get <- function() x
#set_m_inv sets the inverse of the matrix
set_m_inv <- function(mat_inv) m_inv <<- mat_inv
#get_m_inv returs or gets the inverse of the matrix
get_m_inv <- function() m_inv
#this is just to list the components of the function makeCacheMatrix
list(set = set, get = get,
set_m_inv = set_m_inv,
get_m_inv = get_m_inv)
}
## Write a short comment describing this function: Read lines below please
cacheSolve <- function(x, ...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data, ...)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
jorge <- makeCacheMatrix
jorge
jorge <- makeCacheMatrix(matrix(1:5,2,3))
jorge
jorge$get
jorge$get()
jorge <- makeCacheMatrix(matrix(1:6,2,3))
jorge$get()
jorge$set(7:12,2,3)
jorge$inv
cacheSolve(jorge)
jorge$set(7:15,2,3)
jorge$get()
jorge$set(NULL)
jorge$get()
jorge$set(1:9,3,3)
jorge$get()
jorge$set(matrix(1:9,3,3)
)
jorge$get()
cacheSolve(jorge)
jorge$set(matrix(rand(9),3,3)
)
nrand(9)
runif(10)
jorge$set(matrix(runif(9),3,3)
)
caceSolve(jorge)
cacheSolve(jorge)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function: Read lines below
makeCacheMatrix <- function(x = matrix()) {
#m_inv is the matrix inverse, inittialized at null
m_inv <- NULL
# set is a function that initializes the matrix
set <- function(y) {
x <<- y
m_inv <<- NULL
}
#get is a function that gets the matrix itself
get <- function() x
#set_m_inv sets the inverse of the matrix
set_m_inv <- function(mat_inv) m_inv <<- mat_inv
#get_m_inv returs or gets the inverse of the matrix
get_m_inv <- function() m_inv
#this is just to list the components of the function makeCacheMatrix
list(set = set, get = get,
set_m_inv = set_m_inv,
get_m_inv = get_m_inv)
}
## Write a short comment describing this function: Read lines below please
cacheSolve <- function(x, ...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data, ...)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
jorge$set(matrix(runif(9),3,3)
)
jorge$(get)
jorge$get()
cacheSolve(jorge$get())
cacheSolve(jorge)
cacheSolve(jorge,...)
jorge
jorge$get()
jorge$get_m_inv()
cacheSolve(jorge)
data2<- jorge$get()
data2
solve(data2,...)
solve(data2)
data2<- jorge$get()
cacheSolve(jorge)
cacheSolve <- function(x, ...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve(jorge)
cacheSolve <- function(x) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
jorge
cacheSolve(jorge)
jorge
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function: Read lines below
makeCacheMatrix <- function(x = matrix()) {
#m_inv is the matrix inverse, inittialized at null
m_inv <- NULL
# set is a function that initializes the matrix
set <- function(y) {
x <<- y
m_inv <<- NULL
}
#get is a function that gets the matrix itself
get <- function() x
#set_m_inv sets the inverse of the matrix
set_m_inv <- function(mat_inv) m_inv <<- mat_inv
#get_m_inv returs or gets the inverse of the matrix
get_m_inv <- function() m_inv
#this is just to list the components of the function makeCacheMatrix
list(set = set, get = get,
set_m_inv = set_m_inv,
get_m_inv = get_m_inv)
}
## Write a short comment describing this function: Read lines below please
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(matrix(runif(9),3,3))
jorge <- makeCacheMatrix(matrix(runif(9),3,3))
jorge
jorge$get()
solve(jorge$get())
cacheSolve(jorge)
cacheSolve(jorge$get())
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
#m_inv <- solve(data)
x$set_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
##First we look at the cached value
#m_inv <- x$get_m_inv()
##if there is a cahce value then return it
#if(!is.null(m_inv)) {
#  message("getting cached data")
#  return(m_inv)
#}
##if it did not return the cached value then find the inverse of the matrix and return it
##data <- x$get()
#m_inv <- solve(data)
#x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve(jorge)
## Write a short comment describing this function: Read lines below please
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
#  return(m_inv)
}
##if it did not return the cached value then find the inverse of the matrix and return it
##data <- x$get()
#m_inv <- solve(data)
#x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
##if it did not return the cached value then find the inverse of the matrix and return it
##data <- x$get()
#m_inv <- solve(data)
#x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
#m_inv <- solve(data)
#x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
#x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
x$set_inv(m_inv)
#m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
cacheSolve <- function(x,...) {
#First we look at the cached value
m_inv <- x$get_m_inv()
#if there is a cahce value then return it
if(!is.null(m_inv)) {
message("getting cached data")
return(m_inv)
}
#if it did not return the cached value then find the inverse of the matrix and return it
data <- x$get()
m_inv <- solve(data)
x$set_m_inv(m_inv)
m_inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(jorge)
